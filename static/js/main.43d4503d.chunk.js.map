{"version":3,"sources":["components/ActivityBar.jsx","components/Button.jsx","components/TimeDisplay.jsx","App.js","serviceWorker.js","index.js","theme/theme.js"],"names":["Container","styled","div","Item","props","selected","theme","color","text1","ActivityBar","data","activeItem","onClick","handleClick","item","call","map","key","Button","button","primary","spacing","StyledSpan","span","text2","getTimeString","time","showHours","hoursValue","Math","floor","minutesValue","secondsValue","addZero","value","toString","padStart","sliceIndex","slice","join","TimeDisplay","defaultLabels","initialState","workingTime","shortBreak","longBreak","timeLeft","running","start","isBreak","breakCount","maxBreaks","permission","Notification","labels","activeLabel","App","skipStep","nextMode","handleMessage","event","type","action","play","updateTitle","state","document","title","getTime","isLongBreak","requestNotificationPermission","a","window","requestPermission","status","setState","tick","now","Date","nextTime","max","timeId","current","setTimeout","stop","setInitialTime","notify","navigator","serviceWorker","controller","postMessage","skipNotify","getActiveLabel","index","nextBreakIndex","clearTimeout","noNotificationStop","React","createRef","this","ready","then","addEventListener","prevProps","prevState","removeEventListener","PureComponent","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","register","registration","onupdatefound","installingWorker","installing","onstatechange","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.43d4503d.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  display: flex;\n  margin-bottom: 1rem;\n`\n\nconst Item = styled.div`\n  cursor: pointer;\n  display: flex;\n  alflex: 1;\n  padding: 1rem;\n  font-size: 1rem;\n  color: ${props =>\n    props.selected ? 'white' : props.theme.color.text1};\n  background: ${props => (props.selected ? props.theme.color.text1 : 'white')};\n  transition: all 0.5s ease;\n`\n\nconst ActivityBar = ({ data, activeItem, onClick }) => {\n  const handleClick = item => {\n    return onClick?.call(null, item)\n  }\n  return (\n    <Container>\n      {data.map(item => (\n        <Item key={item} onClick={() => handleClick(item)} selected={activeItem === item}>\n          <span>{item}</span>\n        </Item>\n      ))}\n    </Container>\n  )\n}\n\nexport default ActivityBar\n","import styled from 'styled-components'\n\nconst Button = styled.button`\nborder: 1px solid ${props => props.theme.color.primary};\nbackground: ${props => props.theme.color.primary};\npadding: ${props=> props.theme.spacing(4)} ${props=> props.theme.spacing(8)};\ncolor: white;\ncursor: pointer;\nfont-size: 2.25rem;\nfont-weight: 600;\ntext-transform: uppercase;\nborder-radius:  ${props=> props.theme.spacing(1)};\noutline: none;\n\n:hover {\n    background: '#444'\n}\n`\n\nexport default Button","import React from 'react'\nimport styled from 'styled-components'\nconst MS_IN_H = 3600000\nconst MS_IN_M = 60000\nconst MS_IN_S = 1000\n\nconst StyledSpan = styled.span`\n  color: ${props => props.theme.color.text2};\n  font-weight: bold;\n  font-size: 3rem;\n  font-family: 'courier prime', 'courier new', monospace;\n\n  @media (min-width: 500px) {\n    font-size: 8rem;\n  }\n`\nexport const getTimeString = (time, showHours) => {\n  const hoursValue = showHours ? Math.floor(time / MS_IN_H) : 0\n  const minutesValue = Math.floor((time - hoursValue * MS_IN_H) / MS_IN_M)\n  const secondsValue = Math.floor(\n    (time - (hoursValue * MS_IN_H + minutesValue * MS_IN_M)) / MS_IN_S\n  )\n\n  const addZero = value => value.toString().padStart(2, '0')\n  const hours = addZero(hoursValue)\n  const minutes = addZero(minutesValue)\n  const seconds = addZero(secondsValue)\n  const times = [hours, minutes, seconds]\n  const sliceIndex = showHours ? 0 : 1\n  return times.slice(sliceIndex).join(':')\n}\n\nconst TimeDisplay = ({ time, showHours, ...props }) => {\n  return <StyledSpan {...props}>{getTimeString(time, showHours)}</StyledSpan>\n}\n\nexport default TimeDisplay\n","import React from 'react'\nimport styled from 'styled-components'\nimport ActivityBar from './components/ActivityBar'\nimport Button from './components/Button'\nimport TimeDisplay, { getTimeString } from './components/TimeDisplay'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 30vw;\n  margin: 0 auto;\n  padding-top: 30vh;\n  align-items: center;\n`\nconst isDev = process.env.NODE_ENV === 'development'\n\nconst workingTime = isDev ? 0.25 : 25\nconst shortBreak = isDev ? 0.05 : 5\nconst longBreak = isDev ? 0.15 : 15\n\nconst defaultLabels = ['Working time', 'Short interval', 'Long interval']\nconst initialState = {\n  workingTime,\n  shortBreak,\n  longBreak,\n  timeLeft: workingTime * 60 * 1000,\n  running: false,\n  start: null,\n  isBreak: false,\n  breakCount: 0,\n  maxBreaks: 4,\n  permission: Notification?.permission,\n  labels: defaultLabels,\n  activeLabel: defaultLabels[0]\n}\n\nexport default class App extends React.PureComponent {\n  constructor (props) {\n    super(props)\n    this.state = initialState\n    this.timeId = React.createRef()\n  }\n\n  componentDidMount () {\n    this.requestNotificationPermission()\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(() => {\n        navigator.serviceWorker.addEventListener('message', this.handleMessage)\n      })\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    const { start, running, timeLeft, skipNotify, isBreak } = this.state\n\n    if (start && start !== prevState.start && running) {\n      this.tick()\n    }\n\n    if (!skipNotify && !running && running !== prevState.running) {\n      this.notify()\n    }\n\n    if (isBreak !== prevState.isBreak) {\n      this.setInitialTime()\n    }\n\n    if (timeLeft !== prevState.timeLeft) {\n      this.updateTitle()\n    }\n  }\n\n  componentWillUnmount () {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(() => {\n        navigator.serviceWorker.removeEventListener(\n          'message',\n          this.handleMessage\n        )\n      })\n    }\n  }\n\n  skipStep = () => {\n    this.nextMode()\n  }\n\n  handleMessage = event => {\n    const { data } = event ?? {}\n\n    if (data?.type === 'NOTIFICATION_ACTION') {\n      if (data.action === 'skip') {\n        return this.skipStep()\n      }\n\n      if (data.action === 'start') {\n        return this.play()\n      }\n\n      if (data.action === 'skip') {\n        return this.nextMode()\n      }\n\n      return null\n    }\n  }\n\n  updateTitle = () => {\n    const { timeLeft } = this.state\n    document.title = `(${getTimeString(timeLeft)})`\n  }\n\n  getTime = () => {\n    const {\n      isBreak,\n      shortBreak,\n      longBreak,\n      workingTime,\n      isLongBreak\n    } = this.state\n\n    if (isBreak) {\n      if (isLongBreak) {\n        return longBreak * 60000\n      }\n      return shortBreak * 60000\n    }\n\n    return workingTime * 60000\n  }\n\n  requestNotificationPermission = async () => {\n    if ('Notification' in window) {\n      if (Notification.permission !== 'granted') {\n        const status = await Notification.requestPermission()\n        debugger\n        this.setState({\n          permission: status\n        })\n      }\n    }\n  }\n\n  tick = () => {\n    const { running, start, timeLeft } = this.state\n\n    if (running && timeLeft > 0) {\n      const now = new Date()\n      const time = this.getTime() - (now.getTime() - start.getTime())\n\n      const nextTime = Math.max(time, 0)\n      this.timeId.current = setTimeout(this.tick, 1000)\n      this.setState({\n        timeLeft: nextTime\n      })\n    } else {\n      this.stop()\n    }\n  }\n\n  setInitialTime = () => {\n    const timeLeft = this.getTime()\n    this.setState({ timeLeft })\n  }\n\n  notify = () => {\n    const { permission, isBreak, isLongBreak } = this.state\n    if (permission === 'granted') {\n      let type = 'NOTIFY_WORK'\n      if (isBreak) {\n        type = `NOTIFY_${isLongBreak ? 'LONG' : 'SHORT'}`\n      }\n      return navigator.serviceWorker?.controller?.postMessage({ type })\n    }\n    return null\n  }\n\n  play = () => {\n    const { running } = this.state\n    if (!running) {\n      this.setState({\n        skipNotify: false,\n        running: true,\n        start: new Date()\n      })\n    }\n  }\n\n  getActiveLabel = (isBreak, index) => {\n    const isLongBreak = index === 0\n    const { labels } = this.state\n    if (isBreak) {\n      const index = isLongBreak ? 2 : 1\n      return labels[index]\n    }\n    return labels[0]\n  }\n\n  nextMode = skipNotify => {\n    const { breakCount, maxBreaks, isBreak } = this.state\n    const nextBreakIndex = (breakCount + 1) % maxBreaks\n    this.setState({\n      skipNotify,\n      running: false,\n      start: null,\n      isBreak: !isBreak,\n      breakCount: isBreak ? breakCount : nextBreakIndex,\n      isLongBreak: isBreak ? false : nextBreakIndex === 0,\n      activeLabel: this.getActiveLabel(!isBreak, nextBreakIndex)\n    })\n  }\n\n  stop = skipNotify => {\n    if (this.state.running) {\n      if (this.timeId.current) {\n        clearTimeout(this.timeId.current)\n        this.timeId.current = null\n      }\n\n      this.nextMode(skipNotify)\n    }\n  }\n\n  noNotificationStop = () => this.stop(true)\n\n  render () {\n    const { running, timeLeft, labels, activeLabel } = this.state\n    return (\n      <Container>\n        <ActivityBar data={labels} activeItem={activeLabel} />\n        <TimeDisplay time={timeLeft} />\n\n        {running ? (\n          <Button onClick={this.noNotificationStop}>stop</Button>\n        ) : (\n          <Button onClick={this.play}>start</Button>\n        )}\n      </Container>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { ThemeProvider } from 'styled-components'\nimport theme from './theme/theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.register()\n","export default {\n    color: {\n        primary: '#222',\n        text1: '#999',\n        text2: '#444' \n    },\n\n    spacing: (value) => `${0.25 * value}rem`\n}"],"sourceRoot":""}